services:
  api:
    build: .
    env_file: .env
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
      init-minio:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  worker:
    build: .
    env_file: .env
    command: celery -A src.infrastructure.celery_app worker --loglevel=info -Q default
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
      init-minio:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "celery -A src.tasks.worker inspect ping | grep -q 'pong'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  beat:
    build: .
    env_file: .env
    command: celery -A src.infrastructure.celery_app beat   --loglevel=info
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      init-minio:
        condition: service_completed_successfully
    restart: always

  init-minio:
    build: .
    env_file: .env
    command: python -m src.scripts.init_s3
    depends_on:
      minio:
        condition: service_healthy
    restart: "no"

  db:
    image: postgres:16
    restart: always
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: marketplace_blog
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  migrate:
    build: .
    env_file: .env
    command: poetry run alembic upgrade head
    depends_on:
      db: { condition: service_healthy }
    restart: "no"

  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ACCESS_KEY: ${S3_ACCESS_KEY}
      MINIO_SECRET_KEY: ${S3_SECRET_KEY}
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s


volumes:
  db-data:
  minio-data:
