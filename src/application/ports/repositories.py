from __future__ import annotations

from datetime import datetime
from typing import Protocol

from src.domain.models import Article, Category, User


class UserRepository(Protocol):
    async def add(self, user: User) -> None: ...
    async def by_email(self, email: str) -> User | None: ...


class CaregoryRepository(Protocol):
    async def add(self, cat: Category) -> None: ...
    async def list(self) -> list[Category]: ...
    async def get(self, cat_id: int) -> Category | None: ...


class ArticleRepository(Protocol):
    async def add(self, art: Article) -> None: ...
    async def get(self, art_id: int) -> Article | None: ...
    async def list(
        self,
        *,
        search: str | None = None,
        category_id: int | None = None,
        limit: int = 20,
        offset: int = 0,
    ) -> tuple[list[Article], int]: ...
    async def update(self, art: Article) -> None: ...
    async def soft_delete(self, art_id: int, at: datetime) -> None: ...
